require('dotenv').config();
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { startWebServer } = require('./web/dashboard');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

client.commands = new Collection();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
  try {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    if (!command.data || !command.data.name || !command.execute) {
      console.error(`[–û–®–ò–ë–ö–ê] –ö–æ–º–∞–Ω–¥–∞ –≤ —Ñ–∞–π–ª–µ ${file} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
      continue;
    }
    
    client.commands.set(command.data.name, command);
    console.log(`[–£–°–ü–ï–•] –ö–æ–º–∞–Ω–¥–∞ ${command.data.name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
  } catch (error) {
    console.error(`[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ñ–∞–π–ª–∞ ${file}:`, error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
client.once('ready', async () => {
  console.log(`–ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
  startWebServer(client, process.env.WEB_PORT || 3000);

   try {
    // –£–∫–∞–∂–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–∞–Ω–∞–ª–∞
    const guildId = '1149372430436016290';
    const channelId = '1150785801924378624';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∫–∞–Ω–∞–ª
    const guild = await client.guilds.fetch(guildId);
    const channel = await guild.channels.fetch(channelId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if (channel && channel.isTextBased()) {
      await channel.send('üîî pre-release version started! V0.9, dev: ARGNX');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }

  try {
    console.log('–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥...');
    
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    const commandsData = Array.from(client.commands.values()).map(cmd => cmd.data.toJSON());
    
    await rest.put(
      Routes.applicationCommands(process.env.CLIENT_ID),
      { body: commandsData }
    );

    console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${commandsData.length} –∫–æ–º–∞–Ω–¥!`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const command = client.commands.get(interaction.commandName);

  if (!command) {
    console.error(`–ö–æ–º–∞–Ω–¥–∞ ${interaction.commandName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }

  try {
    await command.execute(interaction);
  } catch (error) {
    console.error(error);
    await interaction.reply({ 
      content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!', 
      ephemeral: true 
    });
  }
});

client.login(process.env.DISCORD_TOKEN);